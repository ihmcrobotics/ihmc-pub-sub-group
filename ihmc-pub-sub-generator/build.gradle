plugins {
   id("us.ihmc.ihmc-build") version "0.15.4"
   id("us.ihmc.ihmc-ci") version "1.1.6"
   id("com.github.hierynomus.license") version "0.14.0"
}

apply plugin: "application"

mainClassName = "us.ihmc.idl.generator.IDLGenerator"

ihmc.sourceSetProject("test").apply plugin: "application"
ihmc.sourceSetProject("test").mainClassName = "us.ihmc.pubsub.examples.PublisherExample"

ihmc {
   loadProductProperties("../group.gradle.properties")

   configureDependencyResolution()
   resourceDirectory("main", "templates")
   javaDirectory("test", "generated-java")
   resourceDirectory("test", "idl")
   configurePublications()
}

dependencies {
   compile gradleApi()
   compile group: "us.ihmc", name: "eprosima-idl-parser", version: version
   compile group: "org.anarres", name: "jcpp", version: "1.4.12"
   compile group: "us.ihmc", name: "euclid-core", version: "0.6.1"
}

testDependencies {
   compile group: "us.ihmc", name: "ihmc-pub-sub", version: version
   compile group: "us.ihmc", name: "ihmc-commons-testing", version: "0.24.0"
   compile group: "junit", name: "junit", version: "4.12"
}

license {
   header rootProject.file("license-header.txt")
   ext.year = Calendar.getInstance().get(Calendar.YEAR)
   strictCheck true

   sourceSets = project.container(SourceSet)
   sourceSets.add(ihmc.sourceSet("main"))
}
//
//task generateIDLElementTest(type: us.ihmc.idl.generator.IDLGeneratorTask) {
//   idlFiles = fileTree(dir: "src/test/idl")
//   includeDirs = files(".", "idl")
//   targetDirectory = file("src/test/generated-java")
//   packagePrefix = "us.ihmc.idl.generated"
//}

ihmc.sourceSetProject("test").test {

   forkEvery = 1
   maxParallelForks = 1

   ihmc.sourceSetProject("test").configurations.compile.findAll { it.name.contains("java-allocation-instrumenter") }.each {
      def javaAgentArg = "-javaagent:" + it.getAbsolutePath()
      println("[ihmc-pub-sub-group] Java agent JVM arg: " + javaAgentArg)
      jvmArgs javaAgentArg
   }
}