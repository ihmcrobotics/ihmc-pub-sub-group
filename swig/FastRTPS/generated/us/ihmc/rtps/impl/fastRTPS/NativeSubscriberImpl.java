/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package us.ihmc.rtps.impl.fastRTPS;

public class NativeSubscriberImpl {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected NativeSubscriberImpl(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(NativeSubscriberImpl obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        FastRTPSJNI.delete_NativeSubscriberImpl(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public NativeSubscriberImpl(int entityId, int userDefinedID, int maximumPayloadSize, MemoryManagementPolicy_t memoryManagementPolicy, TopicAttributes topic, ReaderQos qos, ReaderTimes times, LocatorList_t unicastLocatorList, LocatorList_t multicastLocatorList, LocatorList_t outLocatorList, boolean expectsInlineQos, NativeParticipantImpl participant, NativeSubscriberListener listener) throws java.io.IOException {
    this(FastRTPSJNI.new_NativeSubscriberImpl(entityId, userDefinedID, maximumPayloadSize, memoryManagementPolicy.swigValue(), TopicAttributes.getCPtr(topic), topic, ReaderQos.getCPtr(qos), qos, ReaderTimes.getCPtr(times), times, LocatorList_t.getCPtr(unicastLocatorList), unicastLocatorList, LocatorList_t.getCPtr(multicastLocatorList), multicastLocatorList, LocatorList_t.getCPtr(outLocatorList), outLocatorList, expectsInlineQos, NativeParticipantImpl.getCPtr(participant), participant, NativeSubscriberListener.getCPtr(listener), listener), true);
  }

  public void registerReader(TopicAttributes topic, ReaderQos qos) throws java.io.IOException {
    FastRTPSJNI.NativeSubscriberImpl_registerReader(swigCPtr, this, TopicAttributes.getCPtr(topic), topic, ReaderQos.getCPtr(qos), qos);
  }

  public long getGuidLow() {
    return FastRTPSJNI.NativeSubscriberImpl_getGuidLow(swigCPtr, this);
  }

  public long getGuidHigh() {
    return FastRTPSJNI.NativeSubscriberImpl_getGuidHigh(swigCPtr, this);
  }

  public void lock() {
    FastRTPSJNI.NativeSubscriberImpl_lock(swigCPtr, this);
  }

  public void unlock() {
    FastRTPSJNI.NativeSubscriberImpl_unlock(swigCPtr, this);
  }

  public long readnextData(int maxDataLength, java.nio.ByteBuffer data, SampleInfoMarshaller marshaller, TopicKind_t topicKind, OwnershipQosPolicyKind ownerShipQosKind) {
  assert data.isDirect() : "Buffer must be allocated direct.";
    {
      return FastRTPSJNI.NativeSubscriberImpl_readnextData(swigCPtr, this, maxDataLength, data, SampleInfoMarshaller.getCPtr(marshaller), marshaller, topicKind.swigValue(), ownerShipQosKind.swigValue());
    }
  }

  public long takeNextData(int maxDataLength, java.nio.ByteBuffer data, SampleInfoMarshaller marshaller, TopicKind_t topicKind, OwnershipQosPolicyKind ownerShipQosKind) {
  assert data.isDirect() : "Buffer must be allocated direct.";
    {
      return FastRTPSJNI.NativeSubscriberImpl_takeNextData(swigCPtr, this, maxDataLength, data, SampleInfoMarshaller.getCPtr(marshaller), marshaller, topicKind.swigValue(), ownerShipQosKind.swigValue());
    }
  }

  public void getData(long cacheChangePtr, int maxDataLength, java.nio.ByteBuffer data) {
  assert data.isDirect() : "Buffer must be allocated direct.";
    {
      FastRTPSJNI.NativeSubscriberImpl_getData(swigCPtr, this, cacheChangePtr, maxDataLength, data);
    }
  }

  public void updateKey(long cacheChangePtr, java.nio.ByteBuffer key) {
  assert key.isDirect() : "Buffer must be allocated direct.";
    {
      FastRTPSJNI.NativeSubscriberImpl_updateKey(swigCPtr, this, cacheChangePtr, key);
    }
  }

  public boolean received_change(SWIGTYPE_p_CacheChange_t a_change, long unknown_missing_changes_up_to) {
    return FastRTPSJNI.NativeSubscriberImpl_received_change(swigCPtr, this, SWIGTYPE_p_CacheChange_t.getCPtr(a_change), unknown_missing_changes_up_to);
  }

  public boolean remove_change_sub_swig(long change) {
    return FastRTPSJNI.NativeSubscriberImpl_remove_change_sub_swig(swigCPtr, this, change);
  }

  public void waitForUnreadMessage() {
    FastRTPSJNI.NativeSubscriberImpl_waitForUnreadMessage(swigCPtr, this);
  }

  public boolean isInCleanState() {
    return FastRTPSJNI.NativeSubscriberImpl_isInCleanState(swigCPtr, this);
  }

  public void increaseUnreadCount() {
    FastRTPSJNI.NativeSubscriberImpl_increaseUnreadCount(swigCPtr, this);
  }

  public void decreaseUnreadCount() {
    FastRTPSJNI.NativeSubscriberImpl_decreaseUnreadCount(swigCPtr, this);
  }

  public java.math.BigInteger getUnreadCount() {
    return FastRTPSJNI.NativeSubscriberImpl_getUnreadCount(swigCPtr, this);
  }

}
