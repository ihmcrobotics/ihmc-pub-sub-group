/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package us.ihmc.rtps.impl.fastRTPS;

public class NativePublisherImpl {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected NativePublisherImpl(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(NativePublisherImpl obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        FastRTPSJNI.delete_NativePublisherImpl(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public NativePublisherImpl(int entityId, int userDefinedID, int maximumPayloadSize, MemoryManagementPolicy_t memoryManagementPolicy, TopicAttributes topic, WriterQos qos, WriterTimes times, LocatorList_t unicastLocatorList, LocatorList_t multicastLocatorList, LocatorList_t outLocatorList, ThroughputControllerDescriptor throughputController, NativeParticipantImpl participant, NativePublisherListener listener) throws java.io.IOException {
    this(FastRTPSJNI.new_NativePublisherImpl(entityId, userDefinedID, maximumPayloadSize, memoryManagementPolicy.swigValue(), TopicAttributes.getCPtr(topic), topic, WriterQos.getCPtr(qos), qos, WriterTimes.getCPtr(times), times, LocatorList_t.getCPtr(unicastLocatorList), unicastLocatorList, LocatorList_t.getCPtr(multicastLocatorList), multicastLocatorList, LocatorList_t.getCPtr(outLocatorList), outLocatorList, ThroughputControllerDescriptor.getCPtr(throughputController), throughputController, NativeParticipantImpl.getCPtr(participant), participant, NativePublisherListener.getCPtr(listener), listener), true);
  }

  public boolean createPublisher() {
    return FastRTPSJNI.NativePublisherImpl_createPublisher(swigCPtr, this);
  }

  public void write(java.nio.ByteBuffer data, int dataLength, short encapsulation, java.nio.ByteBuffer key, int keyLength) {
  assert data.isDirect() : "Buffer must be allocated direct.";
  assert key.isDirect() : "Buffer must be allocated direct.";
    {
      FastRTPSJNI.NativePublisherImpl_write(swigCPtr, this, data, dataLength, encapsulation, key, keyLength);
    }
  }

  public void dispose(java.nio.ByteBuffer data, int dataLength, short encapsulation, java.nio.ByteBuffer key, int keyLength) {
  assert data.isDirect() : "Buffer must be allocated direct.";
  assert key.isDirect() : "Buffer must be allocated direct.";
    {
      FastRTPSJNI.NativePublisherImpl_dispose(swigCPtr, this, data, dataLength, encapsulation, key, keyLength);
    }
  }

  public void unregister(java.nio.ByteBuffer data, int dataLength, short encapsulation, java.nio.ByteBuffer key, int keyLength) {
  assert data.isDirect() : "Buffer must be allocated direct.";
  assert key.isDirect() : "Buffer must be allocated direct.";
    {
      FastRTPSJNI.NativePublisherImpl_unregister(swigCPtr, this, data, dataLength, encapsulation, key, keyLength);
    }
  }

  public void dispose_and_unregister(java.nio.ByteBuffer data, int dataLength, short encapsulation, java.nio.ByteBuffer key, int keyLength) {
  assert data.isDirect() : "Buffer must be allocated direct.";
  assert key.isDirect() : "Buffer must be allocated direct.";
    {
      FastRTPSJNI.NativePublisherImpl_dispose_and_unregister(swigCPtr, this, data, dataLength, encapsulation, key, keyLength);
    }
  }

  public int removeAllChange() {
    return FastRTPSJNI.NativePublisherImpl_removeAllChange(swigCPtr, this);
  }

  public boolean wait_for_all_acked(Time_t max_wait) {
    return FastRTPSJNI.NativePublisherImpl_wait_for_all_acked(swigCPtr, this, Time_t.getCPtr(max_wait), max_wait);
  }

  public long getGuidLow() {
    return FastRTPSJNI.NativePublisherImpl_getGuidLow(swigCPtr, this);
  }

  public long getGuidHigh() {
    return FastRTPSJNI.NativePublisherImpl_getGuidHigh(swigCPtr, this);
  }

}
