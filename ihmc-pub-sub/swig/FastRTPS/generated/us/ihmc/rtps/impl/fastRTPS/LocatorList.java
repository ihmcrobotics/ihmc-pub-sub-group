/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package us.ihmc.rtps.impl.fastRTPS;

public class LocatorList {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected LocatorList(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(LocatorList obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        FastRTPSJNI.delete_LocatorList(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public LocatorList() {
    this(FastRTPSJNI.new_LocatorList__SWIG_0(), true);
  }

  public LocatorList(LocatorList list) {
    this(FastRTPSJNI.new_LocatorList__SWIG_1(LocatorList.getCPtr(list), list), true);
  }

  public SWIGTYPE_p_std__vectorT_eprosima__fastrtps__rtps__Locator_t_t__iterator begin() {
    return new SWIGTYPE_p_std__vectorT_eprosima__fastrtps__rtps__Locator_t_t__iterator(FastRTPSJNI.LocatorList_begin__SWIG_0(swigCPtr, this), true);
  }

  public SWIGTYPE_p_std__vectorT_eprosima__fastrtps__rtps__Locator_t_t__iterator end() {
    return new SWIGTYPE_p_std__vectorT_eprosima__fastrtps__rtps__Locator_t_t__iterator(FastRTPSJNI.LocatorList_end__SWIG_0(swigCPtr, this), true);
  }

  public long size() {
    return FastRTPSJNI.LocatorList_size(swigCPtr, this);
  }

  public LocatorList assign(LocatorList list) {
    return new LocatorList(FastRTPSJNI.LocatorList_assign(swigCPtr, this, LocatorList.getCPtr(list), list), false);
  }

  public void clear() {
    FastRTPSJNI.LocatorList_clear(swigCPtr, this);
  }

  public void reserve(long num) {
    FastRTPSJNI.LocatorList_reserve(swigCPtr, this, num);
  }

  public void resize(long num) {
    FastRTPSJNI.LocatorList_resize(swigCPtr, this, num);
  }

  public void push_back(Locator_t loc) {
    FastRTPSJNI.LocatorList_push_back__SWIG_0(swigCPtr, this, Locator_t.getCPtr(loc), loc);
  }

  public void push_back(LocatorList locList) {
    FastRTPSJNI.LocatorList_push_back__SWIG_1(swigCPtr, this, LocatorList.getCPtr(locList), locList);
  }

  public boolean empty() {
    return FastRTPSJNI.LocatorList_empty(swigCPtr, this);
  }

  public void erase(Locator_t loc) {
    FastRTPSJNI.LocatorList_erase(swigCPtr, this, Locator_t.getCPtr(loc), loc);
  }

  public boolean contains(Locator_t loc) {
    return FastRTPSJNI.LocatorList_contains(swigCPtr, this, Locator_t.getCPtr(loc), loc);
  }

  public boolean isValid() {
    return FastRTPSJNI.LocatorList_isValid(swigCPtr, this);
  }

  public void swap(LocatorList locatorList) {
    FastRTPSJNI.LocatorList_swap(swigCPtr, this, LocatorList.getCPtr(locatorList), locatorList);
  }

}
