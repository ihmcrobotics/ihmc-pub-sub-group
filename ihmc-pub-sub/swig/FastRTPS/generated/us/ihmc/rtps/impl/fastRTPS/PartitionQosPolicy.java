/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package us.ihmc.rtps.impl.fastRTPS;

public class PartitionQosPolicy extends QosPolicy {
  private transient long swigCPtr;

  protected PartitionQosPolicy(long cPtr, boolean cMemoryOwn) {
    super(FastRTPSJNI.PartitionQosPolicy_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(PartitionQosPolicy obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        FastRTPSJNI.delete_PartitionQosPolicy(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  static public class const_iterator {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected const_iterator(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(const_iterator obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          FastRTPSJNI.delete_PartitionQosPolicy_const_iterator(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    static private long SwigConstructconst_iterator(java.nio.ByteBuffer ptr) {
    assert ptr.isDirect() : "Buffer must be allocated direct.";
      return FastRTPSJNI.new_PartitionQosPolicy_const_iterator(ptr);
    }
  
    public const_iterator(java.nio.ByteBuffer ptr) {
      this(const_iterator.SwigConstructconst_iterator(ptr), true);
    }
  
    public Partition_t __ref__() {
      return new Partition_t(FastRTPSJNI.PartitionQosPolicy_const_iterator___ref__(swigCPtr, this), true);
    }
  
    public Partition_t __deref__() {
      long cPtr = FastRTPSJNI.PartitionQosPolicy_const_iterator___deref__(swigCPtr, this);
      return (cPtr == 0) ? null : new Partition_t(cPtr, false);
    }
  
    public long size() {
      return FastRTPSJNI.PartitionQosPolicy_const_iterator_size(swigCPtr, this);
    }
  
    public String name() {
      return FastRTPSJNI.PartitionQosPolicy_const_iterator_name(swigCPtr, this);
    }
  
  }

  public PartitionQosPolicy() {
    this(FastRTPSJNI.new_PartitionQosPolicy__SWIG_0(), true);
  }

  public PartitionQosPolicy(int in_length) {
    this(FastRTPSJNI.new_PartitionQosPolicy__SWIG_1(in_length), true);
  }

  public PartitionQosPolicy(PartitionQosPolicy b) {
    this(FastRTPSJNI.new_PartitionQosPolicy__SWIG_2(PartitionQosPolicy.getCPtr(b), b), true);
  }

  public PartitionQosPolicy.const_iterator begin() {
    return new PartitionQosPolicy.const_iterator(FastRTPSJNI.PartitionQosPolicy_begin(swigCPtr, this), true);
  }

  public PartitionQosPolicy.const_iterator end() {
    return new PartitionQosPolicy.const_iterator(FastRTPSJNI.PartitionQosPolicy_end(swigCPtr, this), true);
  }

  public long size() {
    return FastRTPSJNI.PartitionQosPolicy_size(swigCPtr, this);
  }

  public long empty() {
    return FastRTPSJNI.PartitionQosPolicy_empty(swigCPtr, this);
  }

  public void set_max_size(long size) {
    FastRTPSJNI.PartitionQosPolicy_set_max_size(swigCPtr, this, size);
  }

  public long max_size() {
    return FastRTPSJNI.PartitionQosPolicy_max_size(swigCPtr, this);
  }

  public void push_back(String name) {
    FastRTPSJNI.PartitionQosPolicy_push_back(swigCPtr, this, name);
  }

  public void clear() {
    FastRTPSJNI.PartitionQosPolicy_clear(swigCPtr, this);
  }

  public stringVector getNames() {
    return new stringVector(FastRTPSJNI.PartitionQosPolicy_getNames(swigCPtr, this), true);
  }

  public void setNames(stringVector nam) {
    FastRTPSJNI.PartitionQosPolicy_setNames(swigCPtr, this, stringVector.getCPtr(nam), nam);
  }

  public stringVector names() {
    return new stringVector(FastRTPSJNI.PartitionQosPolicy_names__SWIG_0(swigCPtr, this), true);
  }

  public void names(stringVector nam) {
    FastRTPSJNI.PartitionQosPolicy_names__SWIG_1(swigCPtr, this, stringVector.getCPtr(nam), nam);
  }

}
