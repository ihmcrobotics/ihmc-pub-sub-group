// Copyright 2017 Florida Institute for Human And Machine Cognition (IHMC)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group JavaType;

main(ctx, definitions, package) ::= <<
$if(package)$
package $package$;
$endif$


import java.io.IOException;

import us.ihmc.rtps.common.SerializedPayload;
import us.ihmc.rtps.TopicDataType;
import us.ihmc.idl.CDR;

$definitions$
>>

interface(ctx, parent, interface, exports, extension) ::= <<
public class $interface.name$PubSubType 
{
    $extension$

    $exports$
}
>>

struct_type(ctx, parent, struct, extension) ::= <<
public class $struct.name$PubSubType implements TopicDataType<$struct.name$>
{
	public static final String name = "$struct.scopedname$";
	private final CDR serializeCDR = new CDR();
	private final CDR deserializeCDR = new CDR();
	
	
	
    public $struct.name$PubSubType()
    {
        
    }
    
       @Override
   public void serialize($struct.name$ data, SerializedPayload serializedPayload) throws IOException
   {
      serializeCDR.serialize(serializedPayload);
      data.serialize(serializeCDR);
      serializeCDR.finishSerialize();
   }

   @Override
   public void deserialize(SerializedPayload serializedPayload, $struct.name$ data) throws IOException
   {
      deserializeCDR.deserialize(serializedPayload);
      data.deserialize(deserializeCDR);
      deserializeCDR.finishDeserialize();
   }

   @Override
   public int getTypeSize()
   {
      return $struct.name$.getMaxCdrSerializedSize();
   }

   @Override
   public String getName()
   {
      return name;
   }

   @Override
   public $struct.name$ createData()
   {
      return new $struct.name$();
   }
    $extension$
}
>>

union_type(ctx, parent, union, extension) ::= <<
>>

enum_type(ctx, parent, enum, extension) ::= <<
>>
