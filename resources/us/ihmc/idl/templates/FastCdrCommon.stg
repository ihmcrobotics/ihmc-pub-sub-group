// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
// Copyright 2017 Florida Institute for Human And Machine Cognition (IHMC)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group FastCdrCommon;

paramRetType(typecode) ::= <<
$if(typecode)$
$typecode.javaTypename$
$else$
void
$endif$
>>

paramTypeByValue(typecode) ::= <<
$if(typecode.primitive)$
$typecode.cppTypename$
$else$
const $typecode.javaTypename$&
$endif$
>>

paramTypeByRef(typecode) ::= <<
$typecode.javaTypename$&
>>

paramDeclarations(params, separatorInicial) ::= <<
$if(params)$$separatorInicial$$endif$$params : {param | /*$param.comment$*/ $if(param.output)$$paramTypeByRef(typecode=param.typecode)$$else$$paramTypeByValue(typecode=param.typecode)$$endif$ $param.name$}; separator=", "$
>>

paramDeclarationsByValue(params, separatorInicial) ::= <<
$if(params)$$separatorInicial$$endif$$params : {param | /*$param.comment$*/ $paramTypeByValue(typecode=param.typecode)$ $param.name$}; separator=", "$
>>

object_serialization(ctx, object, postfix) ::= <<

$if(object.typecode.maxsize)$
if($object.name$$postfix$.$sizeFunction.(object.typecode.stType)$ <= $object.typecode.maxsize$)

$endif$
$if(object.typecode.isType_c)$cdr.write_$object.typecode.stType$($object.name$$postfix$.ordinal());
$elseif(object.typecode.isType_f)$$array_serialize(ctx=ctx, typecodeArr=object.typecode, data=[object.name, postfix], loopvar=ctx.newLoopVarName, dimensions=object.typecode.dimensions)$
$else$cdr.write_$object.typecode.stType$($object.name$$postfix$);
$endif$
$if(object.typecode.maxsize)$
else
    throw new RuntimeException("$object.name$ field exceeds the maximum length");
$endif$
>>

array_init(ctx, typecodeArr, data, loopvar, elemInit, dimensions) ::= <<
$if(first(dimensions))$
for(int $loopvar$ = 0; $loopvar$ < $data$.length; ++$loopvar$)
{
    $array_init(ctx=ctx, typecodeArr=typecodeArr, data=[data, "[", loopvar, "]"], elemInit=elemInit, loopvar=ctx.nextLoopVarName, dimensions=rest(dimensions))$
}
$else$
	$data$ = $elemInit$;	
$endif$
>>

array_copy(ctx, typecodeArr, data, loopvar, other, dimensions) ::= <<
$if(first(dimensions))$
for(int $loopvar$ = 0; $loopvar$ < $data$.length; ++$loopvar$)
{
    $array_copy(ctx=ctx, typecodeArr=typecodeArr, data=[data, "[", loopvar, "]"], other=[other, "[", loopvar, "]"], loopvar=ctx.nextLoopVarName, dimensions=rest(dimensions))$
}
$else$
	$if(typecodeArr.contentTypeCode.primitive)$
	$data$ = $other$;	
	$elseif(typecodeArr.contentTypeCode.isType_d)$
	$data$.setLength(0);
	$data$.append($other$);
        	
	$else$
	$other$.set($data$);
	$endif$
$endif$
>>

array_equals(ctx, typecodeArr, data, loopvar, other, bool, dimensions) ::= <<
$if(first(dimensions))$
for(int $loopvar$ = 0; $loopvar$ < $data$.length; ++$loopvar$)
{
    $array_equals(ctx=ctx, typecodeArr=typecodeArr, data=[data, "[", loopvar, "]"], loopvar=ctx.nextLoopVarName, other=[other, "[", loopvar, "]"], bool=bool, dimensions=rest(dimensions))$
}
$else$
$if(typecodeArr.contentTypeCode.primitive)$$bool$ &= this.$data$ == $other$;
$elseif(typecodeArr.contentTypeCode.isType_d)$$bool$ &= us.ihmc.idl.IDLTools.equals(this.$data$, $other$);
$else$$bool$ &= $data$.equals($other$);
$endif$

$endif$
>>


array_serialize(ctx, typecodeArr, data, loopvar, dimensions) ::= <<
$if(first(dimensions))$
for(int $loopvar$ = 0; $loopvar$ < $data$.length; ++$loopvar$)
{
    $array_serialize(ctx=ctx, typecodeArr=typecodeArr, data=[data, "[", loopvar, "]"], loopvar=ctx.nextLoopVarName, dimensions=rest(dimensions))$
}
$else$
$if(typecodeArr.contentTypeCode.isType_c)$
	cdr.write_$typecodeArr.contentTypeCode.stType$($data$.ordinal())
$else$
	cdr.write_$typecodeArr.contentTypeCode.stType$($data$);
$endif$	
$endif$
>>

object_deserialization(ctx, object, postfix) ::= <<

$if(object.typecode.isType_c)$
	$object.name$$postfix$ = $object.typecode.javaTypename$.values[cdr.read_$object.typecode.stType$()];
$elseif(object.typecode.isType_f)$
	$array_deserialize(ctx=ctx, typecodeArr=object.typecode, data=[object.name, postfix], loopvar=ctx.newLoopVarName, dimensions=object.typecode.dimensions)$
$elseif(object.typecode.primitive)$
	$object.name$$postfix$ = cdr.read_$object.typecode.stType$();
$else$
	cdr.read_$object.typecode.stType$($object.name$$postfix$);
$endif$	
>>

array_deserialize(ctx, typecodeArr, data, loopvar, dimensions) ::= <<
$if(first(dimensions))$
for(int $loopvar$ = 0; $loopvar$ < $data$.length; ++$loopvar$)
{
    $array_deserialize(ctx=ctx, typecodeArr=typecodeArr, data=[data, "[", loopvar, "]"], loopvar=ctx.nextLoopVarName, dimensions=rest(dimensions))$
}
$else$
$if(typecodeArr.contentTypeCode.isType_c)$
	$data$ = $typecodeArr.contentTypeCode.javaTypename$.values[cdr.read_$typecodeArr.contentTypeCode.stType$()];
$elseif(typecodeArr.contentTypeCode.primitive)$
	$data$ = cdr.read_$typecodeArr.contentTypeCode.stType$();
$else$
	cdr.read_$typecodeArr.contentTypeCode.stType$($data$);
$endif$	
$endif$
>>



// TODO Todos los tipos. MEJORAR. size of 1 no deberia generar alignment.
max_serialized_size(ctx, typecode, var) ::= <<
$if(typecode.primitive)$
$var$ += $typecode.size$$if(ctx.cdr)$ + CDR.alignment($var$, $typecode.size$)$endif$;
$elseif(typecode.isType_d)$
$var$ += 4$if(ctx.cdr)$ + CDR.alignment($var$, 4)$endif$ + $typecode.maxsize$ + 1;
$elseif(typecode.isType_e)$
$var$ += 4$if(ctx.cdr)$ + CDR.alignment($var$, 4)$endif$;
$sequence_max_serialized_size(ctx=ctx, typecodeSeq=typecode, var=var, loopvar=ctx.newLoopVarName)$
$elseif(typecode.isType_f)$
$array_max_serialized_size(ctx=ctx, typecodeArr=typecode, var=var, loopvar=ctx.newLoopVarName)$
$else$
$var$ += $typecode.javaTypename$.getMaxCdrSerializedSize($var$);
$endif$
>>

serialized_size_type(ctx, typecode, var) ::= <<
$if(typecode.primitive)$
$var$ += $typecode.size$$if(ctx.cdr)$ + CDR.alignment($var$, $typecode.size$)$endif$;
$endif$
>>

serialized_size(ctx, object, data, var) ::= <<
$if(object.typecode.primitive)$
$var$ += $object.typecode.size$$if(ctx.cdr)$ + CDR.alignment($var$, $object.typecode.size$)$endif$;
$elseif(object.typecode.isType_d)$
$var$ += 4$if(ctx.cdr)$ + CDR.alignment($var$, 4)$endif$ + $data$.get$object.javaName$().length() + 1;
$elseif(object.typecode.isType_e)$
$var$ += 4$if(ctx.cdr)$ + CDR.alignment($var$, 4)$endif$;
$sequence_serialized_size(ctx=ctx, typecodeSeq=object.typecode, data=[data, ".get", object.javaName, "()"], var=var, loopvar=ctx.newLoopVarName)$
$elseif(object.typecode.isType_f)$
$array_serialized_size(ctx=ctx, typecodeArr=object.typecode, data=[data, ".get", object.javaName, "()"], var=var, loopvar=ctx.newLoopVarName, dimensions=object.typecode.dimensions)$
$else$
$var$ += $object.typecode.javaTypename$.getCdrSerializedSize($data$.get$object.javaName$(), $var$);
$endif$
>>

sequence_max_serialized_size(ctx, typecodeSeq, var, loopvar) ::= <<
$if(typecodeSeq.contentTypeCode.primitive)$
$var$ += ($typecodeSeq.maxsize$ * $typecodeSeq.contentTypeCode.size$)$if(ctx.cdr)$ + CDR.alignment($var$, $typecodeSeq.contentTypeCode.size$)$endif$;
$elseif(typecodeSeq.contentTypeCode.isType_d)$
for(int $loopvar$ = 0; $loopvar$ < $typecodeSeq.maxsize$; ++$loopvar$)
{
    $var$ += 4$if(ctx.cdr)$ + CDR.alignment($var$, 4)$endif$ + $typecodeSeq.contentTypeCode.maxsize$ + 1;
}
$else$
for(int $loopvar$ = 0; $loopvar$ < $typecodeSeq.maxsize$; ++$loopvar$)
{
$if(typecodeSeq.contentTypeCode.isType_e)$
    $var$ += 4$if(ctx.cdr)$ + CDR.alignment($var$, 4)$endif$;
    $sequence_max_serialized_size(ctx=ctx, typecodeSeq=typecodeSeq.contentTypeCode, var=var, loopvar=ctx.nextLoopVarName)$
$elseif(typecodeSeq.contentTypeCode.isType_f)$
$array_max_serialized_size(ctx=ctx, typecodeArr=typecodeSeq.contentTypeCode, var=var, loopvar=ctx.nextLoopVarName)$
$else$
    $var$ += $typecodeSeq.contentTypeCode.javaTypename$.getMaxCdrSerializedSize($var$);
$endif$
}
$endif$
>>

sequence_serialized_size(ctx, typecodeSeq, data, var, loopvar) ::= <<
$if(typecodeSeq.contentTypeCode.primitive)$
$var$ += ($data$.size() * $typecodeSeq.contentTypeCode.size$)$if(ctx.cdr)$ + CDR.alignment($var$, $typecodeSeq.contentTypeCode.size$)$endif$;
$elseif(typecodeSeq.contentTypeCode.isType_d)$
for(int $loopvar$ = 0; $loopvar$ < $data$.size(); ++$loopvar$)
{
    $var$ += 4$if(ctx.cdr)$ + CDR.alignment($var$, 4)$endif$ + $data$.get($loopvar$).length() + 1;
}
$else$
for(int $loopvar$ = 0; $loopvar$ < $data$.size(); ++$loopvar$)
{
$if(typecodeSeq.contentTypeCode.isType_e)$
    $var$ += 4$if(ctx.cdr)$ + CDR.alignment($var$, 4)$endif$;
    $sequence_serialized_size(ctx=ctx, typecodeSeq=typecodeSeq.contentTypeCode, data=[data, ".at(", loopvar, ")"], var=var, loopvar=ctx.nextLoopVarName)$
$elseif(typecodeSeq.contentTypeCode.isType_f)$
$array_serialized_size(ctx=ctx, typecodeArr=typecodeSeq.contentTypeCode, data=[data, ".at(", loopvar, ")"], var=var, loopvar=ctx.nextLoopVarName, dimensions=typecodeSeq.contentTypeCode.dimensions)$
$else$
    $var$ += $typecodeSeq.contentTypeCode.javaTypename$.getCdrSerializedSize($data$.get($loopvar$), $var$);
$endif$
}
$endif$
>>

array_max_serialized_size(ctx, typecodeArr, var, loopvar) ::= <<
$if(typecodeArr.contentTypeCode.primitive)$
$var$ += ($typecodeArr.size$ * $typecodeArr.contentTypeCode.size$)$if(ctx.cdr)$ + CDR.alignment($var$, $typecodeArr.contentTypeCode.size$)$endif$;
$elseif(typecodeArr.contentTypeCode.isType_d)$
for(int $loopvar$ = 0; $loopvar$ < $typecodeArr.size$; ++$loopvar$)
{
    $var$ += 4$if(ctx.cdr)$ + CDR.alignment($var$, 4)$endif$ + $typecodeArr.contentTypeCode.maxsize$ + 1;
}
$else$
for(int $loopvar$ = 0; $loopvar$ < $typecodeArr.size$; ++$loopvar$)
{
$if(typecodeArr.contentTypeCode.isType_e)$
    $var$ += 4$if(ctx.cdr)$ + CDR.alignment($var$, 4)$endif$;
    $sequence_max_serialized_size(ctx=ctx, typecodeArr=typecodeArr.contentTypeCode, var=var, loopvar=ctx.nextLoopVarName)$
$elseif(typecodeArr.contentTypeCode.isType_f)$
$array_max_serialized_size(ctx=ctx, typecodeArr=typecodeArr.contentTypeCode, var=var, loopvar=ctx.nextLoopVarName)$
$else$
    $var$ += $typecodeArr.contentTypeCode.javaTypename$.getMaxCdrSerializedSize($var$);
$endif$
}
$endif$
>>

array_serialized_size(ctx, typecodeArr, data, var, loopvar, dimensions) ::= <<
$if(typecodeArr.contentTypeCode.primitive)$
$var$ += ($typecodeArr.size$ * $typecodeArr.contentTypeCode.size$)$if(ctx.cdr)$ + CDR.alignment($var$, $typecodeArr.contentTypeCode.size$)$endif$;
$else$
$if(first(dimensions))$
for(int $loopvar$ = 0; $loopvar$ < $data$.length; ++$loopvar$)
{
    $array_serialized_size(ctx=ctx, typecodeArr=typecodeArr, data=[data, "[", loopvar, "]"], var=var, loopvar=ctx.nextLoopVarName, dimensions=rest(dimensions))$
}
$else$
$if(typecodeArr.contentTypeCode.isType_d)$
    $var$ += 4$if(ctx.cdr)$ + CDR.alignment($var$, 4)$endif$ + $data$.length() + 1;
$elseif(typecodeArr.contentTypeCode.isType_e)$
    $var$ += 4$if(ctx.cdr)$ + CDR.alignment($var$, 4)$endif$;
    $sequence_serialized_size(ctx=ctx, typecodeArr=typecodeArr.contentTypeCode, data=[data, "[", loopvar, "]"], var=var, loopvar=ctx.nextLoopVarName)$
$elseif(typecodeArr.contentTypeCode.isType_f)$
    $array_serialized_size(ctx=ctx, typecodeArr=typecodeArr.contentTypeCode, data=data, var=var, loopvar=loopvar, dimensions=typecodeArr.contentTypeCode.dimensions)$
$else$
    $var$ += $typecodeArr.contentTypeCode.javaTypename$.getCdrSerializedSize($data$, $var$);
$endif$
$endif$
$endif$
>>

serializeCasting(typecode) ::= <<
$if(typecode.isType_c)$
(uint32_t)
$endif$
>>

deserializeCasting(typecode) ::= <<
$if(typecode.isType_c)$
(uint32_t&)
$endif$
>>

sizeFunction ::= [
        "type_e":"size()",
        "type_d":"length()",
        "type_15":"length()",
        default: // not basic type.
]
